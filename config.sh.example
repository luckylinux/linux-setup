#!/bin/bash

# Determine toolpath if not set already
relativepath="./" # Define relative path to go from this script to the root level of the tool
if [[ ! -v toolpath ]]; then scriptpath=$(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd ); toolpath=$(realpath --canonicalize-missing $scriptpath/$relativepath); fi

##############################################################################
# !! Important - Only Single and Mirror/RAID1 Setups are currently supported #
##############################################################################

# Other Configuration
# Define disks
disk1="ata-CT500MX500SSD1_aaaaaaaaaaaa"
disk2="ata-CT500MX500SSD1_bbbbbbbbbbbb"
disk3="ata-CT500MX500SSD1_cccccccccccc"
disk4="ata-CT500MX500SSD1_dddddddddddd"

# Full path
device1="/dev/disk/by-id/${disk1}"
device2="/dev/disk/by-id/${disk2}"
device3="/dev/disk/by-id/${disk3}"
device4="/dev/disk/by-id/${disk4}"

# Put disks into array
disks=()
disks+=("$disk1")
disks+=("$disk2")
disks+=("$disk3")
disks+=("$disk4")

# Put devices into array
devices=()
devices+=("$device1")
devices+=("$device2")
devices+=("$device3")
devices+=("$device4")

# Get number of disks
numdisks_total=${#disks[@]}
numdevices_total=${#devices[@]}

# Suppress output
n="/dev/null"

# Define target Distribution
distribution="debian" # "debian" / "ubuntu" / "fedora"

# Define Debian / Ubuntu Archive
source="http://deb.debian.org/debian/"

# Define Mountpoint (if NOT set externally)
if [[ -z "${destination}" ]]
then
    destination="/mnt/$distribution"
fi

# Define Distribution Release
release="bookworm" # "bullseye", "bookworm", "trixie", "testing", ...

# Packages to Exclude when running debootstrap
excludepackages="netplan.io,snapd"

# Packages to Include when running debootstrap
includepackages="lsb-release,curl,wget,locales"

# Use ZFS Backports Packages
usezfsbackports="yes" # "yes" or "no"

# Use Kernel Backports Packages
usekernelbackports="no" # "yes" or "no"

# Hetzner ZFS Fix
# This will remove their /usr/local/sbin/zfs dummy Package since we install directly from Debian Backports
hetznerzfsfix="no" # "yes" or "no"

# Define hostname
targethostname="pveX"

# Define domainname
targetdomainname="mydomain.tld"

# Backup Server
backupserver="myipadddress"
backupdataset="zdata/BACKUP/${targethostname}"

# Backup Snapshot Name
timestamp=$(date +%Y%m%d)
snapshotname="${timestamp}"

# Define ip address
ipconfiguration="static"   # "static" or "dhcp"
ipaddress="myipadddress"   # Only relevant for "static"
subnetmask="255.255.240.0" # Only relevant for "static"
defgateway="192.168.1.1"   # Only relevant for "static"

# Nameservers
ns1="192.168.1.3"
ns2="192.168.1.4"

# NS Configuration
nsconfig="systemd-resolved" # "resolv.conf" or "systemd-resolved"

# Declare disk labels
labels=("DISK1" "DISK2")

# Filesystem Choices
bootfs="ext4" # "ext4", "zfs" or "none" to skip altogether (leaves partition formatted but NOT mounted / empty)
rootfs="zfs" # "ext4" or "zfs"
datafs="zfs" # "ext4" or "zfs" (if using Separate Data Partition / Pool)

# RAID Choices
efiraid="mdadm" # "mdadm"
bootraid="auto" # "auto" ("zfs" if bootfs="zfs", else "mdadm" if numdisks_total > 1)
rootraid="auto" # "auto" ("zfs" if rootfs="zfs", else "mdadm" if numdisks_total > 1)
dataraid="auto" # "auto" ("zfs" if rootfs="zfs", else "mdadm" if numdisks_total > 1)

# Import ZFS Pool Readonly
readonly="off"  # "off" (normal operation), "on" (for rescueing corrupted Systems)

# Encrypt / ?
encryptrootfs="luks" # "luks" or "no"

# Encrypt data (if using separate data Pool/Partition) ?
encryptdatafs="luks" # "luks" or "no"

# Bootloader Choice
bootloader="grub" # "grub" or "zbm"

# Clevis Automatic Unlock
clevisautounlock="yes" # "yes" or "no"

# Dropbear SSH Unlock at Boot Time
dropbearunlock="no" # "yes" or "no"

# Setup NFS Tools Mountpoint and FSTAB Entry
setupnfstools="yes" # "yes" or "no"

# Dropbear Options
dropbearwait="1200" # Disconnect the session if no traffic is transmitted or received for ${dropbearwait} seconds
dropbearport="2222" # Listen on Port ${dropbearport}

# Define partition sizes
# You can find disk size with the following command
# parted -s /dev/sdX unit MiB print free | grep MiB | head -n1

# Disk size could be automatically be extracted with
# parted -s /dev/sdX unit MiB print free | grep MiB | head -n1 | sed -En "s/.*: (.*)MiB/\1/p"
# or
# parted -s /dev/disk/by-id/ata-Micron_5200_MTFDDAK1T9TDC_190520C8469E unit MiB print free 2> /dev/null | sed -En "s/Disk \/dev\/sd[a-z]: (.*)MiB/\1/p"

# Layout is always
#    - Partition #1: bios grub
#    - Partition #2: fat32 for EFI
#    - Partition #3: /boot
#    - Partition #4: /
#    - Partition #5: (optional) separate Data Partition/Pool

# Install Parted if not installed yet
if [[ -z $(command -v parted) ]]
then
    if [[ -z $(command -v dnf) ]]
    then
        # Debian-like Distribution
        apt-get update
        apt-get install parted
    else
        # Fedora-like Distribution
        dnf update --refresh
        dnf install parted
    fi
fi

# Automatically Calculate Disk Size
disk_size=999999999999999

for disk in "${disks[@]}"
do
    # Get Real Path
    disk_real_path=$(readlink --canonicalize-missing "/dev/disk/by-id/${disk}")

    # Get Disk Size of Current Disk
    disk_size_current=$(parted -s "${disk_real_path}" unit MiB print free 2> /dev/null | grep -E "^Disk /dev/" | head -n1 | sed -E "s|Disk ${disk_real_path}: ([0-9]+)MiB|\1|g")

    # Update Overall Disk Size to the Minimum Value of the Disks
    if [ ${disk_size_current} -lt ${disk_size} ]
    then
        disk_size=${disk_size_current}
    fi
done

# Legacy Manual Disk Size Setting
# disk_size=476940												# MiB

# Partition Sizes
start_bios=4													# MiB
bios_size=64													# MiB
efi_size=1024													# MiB
boot_size=2048													# MiB
swap_size=$((0*1000))											# MiB
margin_size=512													# MiB

# Use a Separate Data Pool ?
data_separate="no"

if [[ "${data_separate}" == "yes" ]]
then
   root_size=65536												# MiB
   data_size=$((disk_size - start_bios - bios_size - efi_size - boot_size - swap_size - margin_size))		# MiB
else
   root_size=$((disk_size - start_bios - bios_size - efi_size - boot_size - swap_size - margin_size))		# MiB
   data_size=0													# MiB
fi

# Pool settings
# Ashift=13 can lead to some overhead - Only applicable when using ZFS
ashift=12

bootpool="bpool"

rootpool="rpool"
rootpool_number_stripes="1" # 1, 2, ...
rootpool_type_each_vdev="mirror" # ZFS: {mirror, raidz1, raidz2}, MDADM: {1 for "RAID1", 5 for "RAID5", 6 for "RAID6" as used in mdadm --level=<LEVEL>}
rootpool_number_disks_each_vdev=$((numdisks_total/rootpool_number_stripes))
rootpool_separate_datasets="no"

datapool="sdata"
datapool_number_stripes="1" # 1, 2, ...
datapool_type_each_vdev="mirror" # ZFS: {mirror, raidz1, raidz2}, MDADM: {1 for "RAID1", 5 for "RAID5", 6 for "RAID6" as used in mdadm --level=<LEVEL>}
datapool_number_disks_each_vdev=$((numdisks_total/datapool_number_stripes))

# CLEVIS/TANG Automated LUKS unlocking
keyservers=("192.168.1.15" "192.168.1.16" "192.168.1.17" "192.168.1.18")

# Mode to be used ("BIOS" / "UEFI")
# Only relevant for grub installation
# (both partition schemes are created in order to facilitate change - if needed)
bootloadermode="UEFI"

# Enable and/or Setup Secure Boot
secureboot="yes"
